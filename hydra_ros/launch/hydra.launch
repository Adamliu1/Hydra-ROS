<launch>
    <!-- data arguments -->
    <arg name="robot_id"/>
    <arg name="robot_frame"/>
    <arg name="world_frame" default="world"/>
    <arg name="do_reconstruction" default="true"/>
    <arg name="use_image_interface" default="false"/>
    <arg name="hydra_uses_images" value="$(eval arg('do_reconstruction') and arg('use_image_interface'))"/>
    <arg name="publish_pointcloud" default="false"/>
    <arg name="pointcloud_topic" if="$(arg do_reconstruction)"/>
    <arg name="rgb_image_transport" default="raw"/>
    <arg name="image_queue_size" default="10"/>

    <arg name="rgb_topic" if="$(arg hydra_uses_images)"/>
    <arg name="rgb_info_topic" if="$(arg hydra_uses_images)"/>
    <arg name="depth_topic" if="$(arg hydra_uses_images)"/>
    <arg name="label_topic" if="$(arg hydra_uses_images)"/>

    <!-- parameter files -->
    <arg name="config_dir"/>
    <arg name="semantic_map_path"/>
    <arg name="reconstruction_config_path" if="$(arg do_reconstruction)"/>
    <arg name="frontend_config_path" default="$(arg config_dir)/dsg_frontend_config.yaml"/>
    <arg name="backend_config_path" default="$(arg config_dir)/dsg_backend_config.yaml"/>
    <arg name="param_overrides_file" default="$(find hydra_ros)/config/overrides.yaml"/>
    <arg name="ros_params_file" default="$(find hydra_ros)/config/ros_params.yaml"/>

    <arg name="labelspace_dir" default="$(find hydra)/config/label_spaces"/>
    <arg name="labelspace_name"/>
    <arg name="labelspace_path" default="$(arg labelspace_dir)/$(arg labelspace_name)_label_space.yaml"/>

    <!-- pipeline configuration -->
    <arg name="use_gt_frame" default="true"/>
    <arg name="use_oriented_bounding_boxes" default="false"/>
    <arg name="exit_mode" default="NORMAL"/>
    <arg name="optimize_on_lc" default="true"/>
    <arg name="enable_merge_undos" default="false"/>
    <arg name="enable_frontend_output" default="true"/>
    <arg name="use_ros_backend" default="false"/>
    <arg name="validate_vertices" default="false"/>
    <!-- sensor extrinsics -->
    <arg name="extrinsics_mode" default="USE_LOADED_PARAMS"/>
    <arg name="extrinsics" if="$(eval arg('extrinsics_mode') == 'USE_LOADED_PARAMS')"/>
    <arg name="kimera_extrinsics_file" if="$(eval arg('extrinsics_mode') == 'USE_KIMERA')"/>
    <arg name="sensor_frame" if="$(eval arg('extrinsics_mode') == 'USE_TF')"/>
    <!-- LCD pipeline configuration -->
    <arg name="lcd_use_bow_vectors" default="true"/>
    <arg name="enable_dsg_lcd" default="false"/>
    <arg name="use_gnn_descriptors" default="false"/>
    <arg name="lcd_gnn_object_model" default="$(find hydra)/models/lcd/object_gnn.onnx"/>
    <arg name="lcd_gnn_places_model" default="$(find hydra)/models/lcd/place_gnn.onnx"/>
    <arg name="lcd_gnn_label_embeddings" default="" if="$(arg use_gnn_descriptors)"/>
    <arg name="lcd_config_path" default="$(arg config_dir)/dsg_lcd_config.yaml"
         unless="$(arg use_gnn_descriptors)"/>
    <arg name="lcd_config_path" default="$(arg config_dir)/dsg_gnn_lcd_config.yaml"
         if="$(arg use_gnn_descriptors)"/>
    <!-- zmq interface -->
    <arg name="use_zmq_interface" default="false"/>
    <arg name="zmq_send_url" default="tcp://127.0.0.1:8001"/>
    <arg name="zmq_recv_url" default="tcp://127.0.0.1:8002"/>
    <!-- misc visualization -->
    <arg name="start_visualizer" default="true"/>
    <arg name="visualize_reconstruction" default="false"/>
    <arg name="graph_viz_config_path" default="$(find hydra_ros)/config/graph_visualization_config.yaml"/>

    <!-- logging output for hydra -->
    <arg name="dsg_output_dir" default="$(find hydra)/output/"/>
    <arg name="dsg_output_prefix" default="hydra"/>
    <arg name="log_registration" default="false"/>
    <arg name="log_timing_incrementally" default="false"/>
    <arg name="show_topology_stats" default="false"/>
    <arg name="dsg_path" default="$(arg dsg_output_dir)/$(arg dsg_output_prefix)"/>
    <arg name="start_logger" default="false"/>
    <!-- log message controls -->
    <arg name="min_glog_level" default="0"/>
    <arg name="verbosity" default="0"/>
    <arg name="glog_to_file" default="false"/>
    <arg name="glog_dir" if="$(arg glog_to_file)"/>
    <arg name="glog_file_args" value="--logtostderr=0 --log_dir=$(arg glog_dir)" if="$(arg glog_to_file)"/>
    <arg name="glog_file_args" value="" unless="$(arg glog_to_file)"/>
    <arg name="ros_output" value="screen" unless="$(arg glog_to_file)"/>
    <arg name="ros_output" value="log" if="$(arg glog_to_file)"/>

    <!-- development args -->
    <arg name="debug" default="false"/>
    <arg name="launch_prefix" value="gdb -ex run --args" if="$(arg debug)"/>
    <arg name="launch_prefix" value="" unless="$(arg debug)"/>

    <node pkg="hydra_ros" type="hydra_ros_node"
          name="hydra_ros_node"
          launch-prefix="$(arg launch_prefix)"
          args="--minloglevel=$(arg min_glog_level) -v=$(arg verbosity) $(arg glog_file_args)"
          required="true"
          output="$(arg ros_output)">
        <env name="TERM" value="xterm-256color"/>

        <!-- topic remappings -->
        <remap from="~pose_graph" to="kimera_vio_ros/pose_graph_incremental"
               unless="$(arg use_gt_frame)"/>
        <remap from="~/bow_vectors" to="kimera_vio_ros/bow_query"/>
        <remap from="frame_registration" to="kimera_vio_ros/kimera_vio_ros_node/register_lcd_frames"/>
        <remap from="~pointcloud" to="$(arg pointcloud_topic)" if="$(arg do_reconstruction)"/>
        <remap from="~rgb/image_raw" to="$(arg rgb_topic)" if="$(arg hydra_uses_images)"/>
        <remap from="~rgb/image_raw/compressed" to="$(arg rgb_topic)/compressed" if="$(arg hydra_uses_images)"/>
        <remap from="~rgb/camera_info" to="$(arg rgb_info_topic)" if="$(arg hydra_uses_images)"/>
        <remap from="~depth_registered/image_rect" to="$(arg depth_topic)" if="$(arg hydra_uses_images)"/>
        <remap from="~semantic/image_raw" to="$(arg label_topic)" if="$(arg hydra_uses_images)"/>
        <!-- image transport -->
        <param name="rgb/image_transport" value="$(arg rgb_image_transport)"/>
        <param name="image_queue_size" value="$(arg image_queue_size)"/>

        <!-- parameter files -->
        <rosparam file="$(arg reconstruction_config_path)" if="$(arg do_reconstruction)"/>
        <rosparam file="$(arg frontend_config_path)"/>
        <rosparam file="$(arg backend_config_path)"/>
        <rosparam file="$(arg lcd_config_path)"/>
        <rosparam file="$(arg labelspace_path)"/>
        <rosparam file="$(arg ros_params_file)"/>

        <!-- robot configuration -->
        <param name="robot_id" value="$(arg robot_id)"/>
        <param name="world_frame" value="$(arg world_frame)"/>
        <param name="robot_frame" value="$(arg robot_frame)"/>
        <!-- sensor extrinsics -->
        <param name="extrinsics_mode" value="$(arg extrinsics_mode)"/>
        <rosparam file="$(arg extrinsics)" if="$(eval arg('extrinsics_mode') == 'USE_LOADED_PARAMS')"/>
        <param name="kimera_extrinsics_file" value="$(arg kimera_extrinsics_file)" if="$(eval arg('extrinsics_mode') == 'USE_KIMERA')"/>
        <param name="sensor_frame" value="$(arg sensor_frame)" if="$(eval arg('extrinsics_mode') == 'USE_TF')"/>
        <!-- pipeline configuration -->
        <param name="exit_mode" value="$(arg exit_mode)"/>
        <param name="make_pose_graph" value="$(arg use_gt_frame)"/>
        <param name="do_reconstruction" value="$(arg do_reconstruction)"/>
        <param name="use_image_receiver" value="$(arg use_image_interface)"/>
        <param name="publish_pointcloud" value="$(arg publish_pointcloud)"/>
        <param name="semantic_colormap_file" value="$(arg semantic_map_path)"/>
        <param name="enable_frontend_output" value="$(arg enable_frontend_output)"/>
        <param name="use_ros_backend" value="$(arg use_ros_backend)"/>
        <param name="dsg/use_mesh_subscribers" value="$(arg use_ros_backend)"/>
        <param name="objects/bounding_box_type" value="RAABB" if="$(arg use_oriented_bounding_boxes)"/>
        <param name="objects/bounding_box_type" value="AABB" unless="$(arg use_oriented_bounding_boxes)"/>
        <param name="validate_vertices" value="$(arg validate_vertices)"/>
        <!-- logging -->
        <param name="log_path" value="$(arg dsg_path)"/>
        <param name="log_timing_incrementally" value="$(arg log_timing_incrementally)"/>
        <param name="show_stats" value="$(arg show_topology_stats)"/>
        <!-- zmq interface -->
        <param name="dsg/use_zmq_interface" value="$(arg use_zmq_interface)"/>
        <param name="dsg/zmq_send_url" value="$(arg zmq_send_url)"/>
        <param name="dsg/zmq_recv_url" value="$(arg zmq_recv_url)"/>
        <!-- LCD params -->
        <param name="enable_lcd" value="$(arg enable_dsg_lcd)"/>
        <param name="lcd_use_bow_vectors" value="$(arg lcd_use_bow_vectors)"/>
        <param name="dsg/optimize_on_lc" value="$(arg optimize_on_lc)"/>
        <param name="dsg/enable_merge_undos" value="$(arg enable_merge_undos)"/>
        <param name="lcd/log_registration_problem" value="$(arg log_registration)"/>
        <param name="lcd/use_gnn_descriptors" value="$(arg use_gnn_descriptors)"/>
        <param name="lcd/gnn_lcd/object_model_path" value="$(arg lcd_gnn_object_model)"/>
        <param name="lcd/gnn_lcd/places_model_path" value="$(arg lcd_gnn_places_model)"/>
        <param name="lcd/gnn_lcd/label_embeddings_file" value="$(arg lcd_gnn_label_embeddings)"
               if="$(arg use_gnn_descriptors)"/>
        <!-- visualization -->
        <param name="visualize_reconstruction" value="$(arg visualize_reconstruction)"/>
        <param name="publish_reconstruction_mesh" value="$(arg visualize_reconstruction)"/>
        <rosparam file="$(arg graph_viz_config_path)" ns="topology_visualizer"/>

        <!-- goes last to make sure params actually override -->
        <rosparam file="$(arg param_overrides_file)"/>
    </node>

    <group if="$(arg start_visualizer)">
        <include file="$(find hydra_ros)/launch/utils/hydra_streaming_visualizer.launch" pass_all_args="true"/>

        <include file="$(find pose_graph_tools)/launch/posegraph_view.launch">
            <arg name="frame_id"      value="$(arg world_frame)" />
            <arg name="graph_topic"   value="pose_graph" />
            <arg name="ns"            value="hydra_ros_node/pgmo"/>
        </include>
    </group>

    <include if="$(arg start_logger)" file="$(find hydra_ros)/launch/utils/scene_graph_logger.launch" pass_all_args="true">
        <arg name="output_path" value="$(arg dsg_path)"/>
    </include>

</launch>
